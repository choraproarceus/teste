name: Apolinario

on:
  schedule:
    - cron: '0 */5 * * *'  # A cada 5 horas
  workflow_dispatch:

jobs:
  vps-session:
    runs-on: ubuntu-latest
    timeout-minutes: 300  # 5 horas

    steps:
      - name: Checkout repo (teste)
        uses: actions/checkout@v4

      - name: Set hostname
        run: sudo hostnamectl set-hostname apolinario

      - name: Instalar dependências
        run: |
          sudo apt update
          sudo apt install -y tmate curl unzip sudo net-tools neofetch

      - name: Restaurar backup (se existir)
        run: |
          if [ -f backup.zip ]; then
            unzip -o backup.zip -d /
            echo "✅ Backup restaurado."
            if [ -f /opt/vps-backup/data/database.txt ]; then
              cp /opt/vps-backup/data/database.txt $GITHUB_WORKSPACE/database.txt
              echo "✅ database.txt restaurado no repo teste."
            fi
          else
            echo "⚠️ Nenhum backup.zip encontrado, iniciando do zero."
          fi

      - name: Debug - após restore
        run: |
          ls -lh $GITHUB_WORKSPACE || true
          cat $GITHUB_WORKSPACE/database.txt || echo "⚠️ database.txt não existe"

      - name: Criar usuário apolinario
        run: |
          if ! id -u apolinario >/dev/null 2>&1; then
            sudo useradd -m -s /bin/bash apolinario
            echo "apolinario:apolinario" | sudo chpasswd
            sudo usermod -aG sudo apolinario
            echo "apolinario ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/apolinario
          fi

      - name: Clonar repo do bot (teste2)
        run: git clone https://x-access-token:${{ secrets.GH_PAT }}@github.com/choraproarceus/teste2.git

      - name: Instalar dependências Python e iniciar bot
        run: |
          cd teste2
          pip install --upgrade pip
          pip install discord.py docker psutil
          nohup python3 bot-script.py &>/dev/null &

      - name: Build Docker images
        run: |
          cd teste2
          docker build -t debian-vps -f Dockerfile.debian . || true
          docker build -t ubuntu-vps -f Dockerfile.ubuntu . || true

      - name: Pausar até faltar 1 minuto (4h56m)
        run: sleep 17800

      - name: Sleep final (1 minuto restante)
        run: sleep 60

      - name: Debug antes do backup
        run: |
          ls -lh $GITHUB_WORKSPACE || true
          cat $GITHUB_WORKSPACE/database.txt || echo "⚠️ database.txt não existe"

      - name: Criar backup (incluindo database.txt)
        run: |
          sudo mkdir -p /opt/vps-backup/data
          if [ -f $GITHUB_WORKSPACE/database.txt ]; then
            sudo cp $GITHUB_WORKSPACE/database.txt /opt/vps-backup/data/
            echo "✅ database.txt incluído no backup."
          else
            echo "⚠️ Nenhum database.txt encontrado."
          fi
          sudo chown -R $USER:$USER /opt/vps-backup
          zip -r backup.zip /opt/vps-backup

      - name: Commit & Push backup.zip
        run: |
          git config --global user.name "Apolinario"
          git config --global user.email "apolinario@example.com"
          git add backup.zip
          git commit -m "Atualizando backup da VPS" || echo "Nada para commit"
          git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/choraproarceus/teste.git
